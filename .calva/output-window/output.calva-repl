; This is the Calva REPL Window.
; It's just a file, really, with some special treatment from Calva.
; Use it as a REPL input prompt if you like. (When the REPL is connected.)
; TIPS: The keyboard shortcut `ctrl+alt+o r` shows and focuses this window
; Please see https://calva.io/repl-window/ for more info.
; Happy coding! ♥️

; TIPS: As with any Clojure file when the REPL is connected:
; - `alt+enter` evaluates the current top level form.
; - `ctrl+enter` evaluates the current form.
; Special for this file:
; - `alt+up` and `alt+down` traverse up and down the REPL command history
;    when the cursor is after the last contents at the prompt
; 
; See also the Calva Inspector: https://calva.io/inspector/

PLEASE NOTE
We will update the default location of this file.
The new default location will be
  "<projectRootPath>/.calva/repl.calva-repl"
For now the legacy path is used by default.
To give yourself a smooth transition, you can opt in
to the change, by configuring this setting as false:
  "calva.useLegacyReplWindowPath"
and then add "**/.calva/repl.calva-repl" to your ".gitignore" file.


This file is configured as the output destination for all REPL output.
You can configure this with the setting:
  "calva.outputDestinations"


; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Starting Jack-in Terminal: (cd /src/clojure/locks/locks; lein update-in :dependencies conj '[nrepl,"1.1.1"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.47.1"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- with-profile +uberjar repl :headless)
; Using host:port 127.0.0.1:36725 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉locks.core꞉> 
"Please see https://calva.io/output/#about-stdout-in-the-repl-window
about why stdout printed to this file is prepended with `;` to be line comments."
clj꞉locks.core꞉> 
; Jack-in done.
clj꞉locks.core꞉> 
#'locks.handlers.users/releaseLocks
clj꞉locks.handlers.users꞉> 
#'locks.routes.routes/app-routes
clj꞉locks.routes.routes꞉> 
#'locks.core/-main
clj꞉locks.core꞉> 
(start-server)
; Server started on port 3000
nil
clj꞉locks.core꞉> 
; health check function called
; starting locking......
(stop-server)
; Server stopped
nil
clj꞉locks.core꞉> 
#'locks.handlers.users/releaseLocks
clj꞉locks.handlers.users꞉> 
#'locks.core/-main
clj꞉locks.core꞉> 
(start-server)
; Server started on port 3000
nil
clj꞉locks.core꞉> 
; starting locking......
; starting locking......
; starting locking......
(*res)
; Syntax error compiling at (.calva/output-window/output.calva-repl:78:1).
; Unable to resolve symbol: *res in this context
clj꞉locks.core꞉> 
; Syntax error compiling at (src/locks/handlers/users.clj:121:13).
; Unable to resolve symbol: resource in this context
clj꞉locks.handlers.users꞉> 
*res
"resource1"
clj꞉locks.handlers.users꞉> 
(set-key-with-ttl  *res *ide (int *dur))
; Execution error (ClassCastException) at (REPL:1).
; null
clj꞉locks.handlers.users꞉> 
(set-key-with-ttl  *res *ide ( *dur))
; Execution error (ClassCastException) at locks.handlers.users/eval10732 (form-init3501890706118244856.clj:92).
; class java.lang.String cannot be cast to class clojure.lang.IFn (java.lang.String is in module java.base of loader 'bootstrap'; clojure.lang.IFn is in unnamed module of loader 'app')
clj꞉locks.handlers.users꞉> 
#'locks.core/-main
clj꞉locks.core꞉> 
(stop-server)
; Server stopped
nil
clj꞉locks.core꞉> 
#'locks.handlers.users/releaseLocks
clj꞉locks.handlers.users꞉> 
#'locks.routes.routes/app-routes
clj꞉locks.routes.routes꞉> 
#'locks.core/-main
clj꞉locks.core꞉> 
#'locks.core/-main
clj꞉locks.core꞉> 
(start-server)
; Server started on port 3000
nil
clj꞉locks.core꞉> 
; starting locking......
(set-key-with-ttl  *res *ide *dur)
; Syntax error compiling at (.calva/output-window/output.calva-repl:115:1).
; Unable to resolve symbol: set-key-with-ttl in this context
clj꞉locks.core꞉> 
; starting locking......
; starting locking......
nil
clj꞉locks.handlers.users꞉> 
(set-key-with-ttl  *res *ide *dur)
; Execution error (ClassCastException) at (REPL:1).
; null
clj꞉locks.handlers.users꞉> 
(set-key-with-ttl  (str *res) (str *ide) *dur)
; Execution error (ClassCastException) at (REPL:1).
; null
clj꞉locks.handlers.users꞉> 
(set-key-with-ttl  *res *ide (int *dur))
; Execution error (ClassCastException) at (REPL:1).
; null
clj꞉locks.handlers.users꞉> 
(set-key-with-ttl  *res *ide 4)
"OK"
clj꞉locks.handlers.users꞉> 
#'locks.core/-main
clj꞉locks.core꞉> 
(stop-server)
; Server stopped
nil
clj꞉locks.core꞉> 
#'locks.handlers.users/releaseLocks
clj꞉locks.handlers.users꞉> 
#'locks.core/-main
clj꞉locks.core꞉> 
(start-server)
#'locks.core/-main
clj꞉locks.core꞉> 
#'locks.core/-main
clj꞉locks.core꞉> 
(stop-server)
nil
clj꞉locks.core꞉> 
(start-server)
; Server started on port 3000
nil
clj꞉locks.core꞉> 
; starting locking......
; Syntax error compiling at (src/locks/handlers/users.clj:1:8626).
; Unable to resolve symbol: strBody in this context
clj꞉locks.handlers.users꞉> 
(set-key-with-ttl  *res *ide (Integer/parseInt *dur))
"OK"
clj꞉locks.handlers.users꞉> 
#'locks.handlers.users/releaseLocks
clj꞉locks.handlers.users꞉> 
#'locks.core/-main
clj꞉locks.core꞉> 
(start-server)
; Execution error (BindException) at sun.nio.ch.Net/bind0 (Net.java:-2).
; Address already in use
clj꞉locks.core꞉> 
(stop-server)
; Server stopped
nil
clj꞉locks.core꞉> 
(start-server)
; Server started on port 3000
nil
clj꞉locks.core꞉> 
; starting locking......
"OK"
clj꞉locks.handlers.users꞉> 
; Syntax error compiling at (src/locks/handlers/users.clj:124:13).
; Unable to resolve symbol: resource in this context
clj꞉locks.handlers.users꞉> 
#'locks.core/-main
clj꞉locks.core꞉> 
(stop-server)
; Server stopped
nil
clj꞉locks.core꞉> 
(start-server)
; Server started on port 3000
nil
clj꞉locks.core꞉> 
; starting locking......
#'locks.handlers.users/releaseLocks
clj꞉locks.handlers.users꞉> 
#'locks.core/-main
clj꞉locks.core꞉> 
(stop-server)
; Server stopped
nil
clj꞉locks.core꞉> 
(start-server)
; Server started on port 3000
nil
clj꞉locks.core꞉> 
; health check function called
; health check function called
; starting locking......
; starting locking......
; starting locking......
; starting locking......
; starting locking......
; starting locking......
(stop-server)
; Server stopped
nil
clj꞉locks.core꞉> 
#'locks.handlers.users/releaseLocks
clj꞉locks.handlers.users꞉> 
#'locks.handlers.users/releaseLocks
clj꞉locks.handlers.users꞉> 
#'locks.core/-main
clj꞉locks.core꞉> 
(start-server)
; Server started on port 3000
nil
clj꞉locks.core꞉> 
; starting locking......
; starting locking......
(stop-server)
; Server stopped
nil
clj꞉locks.core꞉> 
; nREPL Connection was closed
; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 

; Starting Jack-in Terminal: (cd /src/clojure/locks/locks; lein update-in :dependencies conj '[nrepl,"1.1.1"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.47.1"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- with-profile +uberjar repl :headless)
; Using host:port 127.0.0.1:33077 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉locks.core꞉> 
; Jack-in done.
clj꞉locks.core꞉> 
#'locks.handlers.users/releaseLocks
clj꞉locks.handlers.users꞉> 
#'locks.routes.routes/app-routes
clj꞉locks.routes.routes꞉> 
#'locks.core/-main
clj꞉locks.core꞉> 
(start-server)
; Server started on port 3000
nil
clj꞉locks.core꞉> 
; starting locking......
; locked
; starting locking......
; locked
; starting locking......
; locked
; releasing locks.....
; lock released
; starting locking......
; locked
; releasing locks.....
; lock released
; health check function called
; starting locking......
; locked
; releasing locks.....
; lock released
; starting locking......
; locked
; releasing locks.....
; lock released
; starting locking......
; locked
; releasing locks.....
; lock released
(stop-server)
; Server stopped
nil
clj꞉locks.core꞉> 
(start-server)
; Server started on port 3000
nil
clj꞉locks.core꞉> 
(stop-server)\; Server stopped
nil
clj꞉locks.core꞉> 
nil
clj꞉locks.core꞉> 
#'locks.handlers.users/releaseLocks
clj꞉locks.handlers.users꞉> 
#'locks.core/-main
clj꞉locks.core꞉> 
(start-server)
; Server started on port 3000
nil
clj꞉locks.core꞉> 
; starting locking......
; locked
; releasing locks.....
; lock released
; starting locking......
; locked
; releasing locks.....
; lock released
; nREPL Connection was closed
